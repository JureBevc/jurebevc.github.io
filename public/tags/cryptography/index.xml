<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cryptography on Jure Bevc</title>
    <link>http://localhost:8000/tags/cryptography/</link>
    <description>Recent content in Cryptography on Jure Bevc</description>
    <image>
      <title>Jure Bevc</title>
      <url>http://localhost:8000/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:8000/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Sep 2023 21:14:30 +0200</lastBuildDate><atom:link href="http://localhost:8000/tags/cryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hashlookup - A reverse lookup table tool</title>
      <link>http://localhost:8000/posts/how-many-hashes/</link>
      <pubDate>Sun, 03 Sep 2023 21:14:30 +0200</pubDate>
      
      <guid>http://localhost:8000/posts/how-many-hashes/</guid>
      <description>Introduction Reverse hash lookup tables are data structures used to quicken the process of finding plaintext values corresponding to given hash values. Hash functions are designed to convert input data into fixed-length hash codes, making it challenging (impossible) to reverse-engineer the original input from the hash alone.
Reverse hash lookup tables work by precomputing and storing pairs of plaintext and corresponding hash values. This allows for efficient and rapid identification of plaintext inputs when given a hash value, making them a valuable tool for attackers attempting to crack hashed passwords and a subject of interest for defenders seeking to enhance security measures by mitigating this type of vulnerability.</description>
    </item>
    
  </channel>
</rss>
