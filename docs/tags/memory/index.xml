<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Memory on Jure Bevc</title>
    <link>https://jurebevc.github.io/tags/memory/</link>
    <description>Recent content in Memory on Jure Bevc</description>
    <image>
      <title>Jure Bevc</title>
      <url>https://jurebevc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jurebevc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Aug 2023 12:36:58 +0200</lastBuildDate><atom:link href="https://jurebevc.github.io/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading memory during runtime</title>
      <link>https://jurebevc.github.io/posts/reading-memory-during-runtime/</link>
      <pubDate>Sat, 19 Aug 2023 12:36:58 +0200</pubDate>
      
      <guid>https://jurebevc.github.io/posts/reading-memory-during-runtime/</guid>
      <description>What and why Lately, I&amp;rsquo;ve been curious about reading the memory of a process during runtime. There are several use cases for this, but the ones that piqued my interest are anti-virus software and (illegal) botting software for video games. Game companies can invest a lot of resources into solving botting issues, but consistently detecting programs that read your game&amp;rsquo;s memory can be very difficult if the programs are not injecting anything directly into your running process.</description>
    </item>
    
  </channel>
</rss>
